# GitHub Action workflows to build and test the plug-in on Windows
#
# Adapted from Wireshark's repository https://gitlab.com/wireshark/wireshark/-/tree/master/.github/workflows

name: Build and test Windows plug-in

on:
   push:
      branches:
         - main
      tags:
         - '**'
   pull_request:
      branches:
         - main

env:
   WIRESHARK_BRANCH: release-3.6
   WIRESHARK_BASE_DIR: C:/wireshark-libs
   WIRESHARK_QT_VERSION: 5.15.2

jobs:
   intree:
      name: Build in-tree plugin
      runs-on: windows-2019
      steps:
         - name: Checkout Wireshark
           run: |
              git init
              git remote add -t "${{ env.WIRESHARK_BRANCH }}" -f origin https://gitlab.com/wireshark/wireshark.git
              git checkout ${{ env.WIRESHARK_BRANCH }}
         - name: Checkout plug-in
           uses: actions/checkout@v2
           with:
              path: plugins/epan/v2g
         - name: Apply patch
           run: |
              git apply plugins/epan/v2g/extern/wireshark-${{ env.WIRESHARK_BRANCH }}.patch
         - name: Choco install
           run: cinst -y --force --no-progress asciidoctorj xsltproc docbook-bundle cmake nsis
         - name: Install winflexbison3
           run: cinst -y --force --no-progress winflexbison3 --version 2.5.18.20190508
         - name: Install strawberryperl
           uses: shogo82148/actions-setup-perl@v1
           with:
              perl-version: '5.30'
              distribution: strawberry
         - name: Install Qt
           uses: jurplel/install-qt-action@v2
           with:
              version: ${{ env.WIRESHARK_QT_VERSION }}
         - name: Add msbuild to PATH
           uses: microsoft/setup-msbuild@v1.0.2
           with:
              vs-version: 16.4
         - name: Set MSVC command prompt
           uses: ilammy/msvc-dev-cmd@v1
         - name: Mkdir
           run: mkdir build
         - name: Cmake
           run: cmake -A x64 ..
           env:
              PLATFORM: x64
              QT5_BASE_DIR: C:/Qt/${{ env.WIRESHARK_QT_VERSION }}/msvc2019_64
           working-directory: build

         - name: Build
           run: cmake --build . --config RelWithDebInfo
           working-directory: build
         - name: Build Windows pkg
           run: |
              msbuild /m /p:Configuration=RelWithDebInfo nsis_package_prep.vcxproj
              msbuild /m /p:Configuration=RelWithDebInfo nsis_package.vcxproj
           working-directory: build

         - name: Move Windows artifacts
           run: |
              mkdir v2g-artifact
              mv build/packaging/nsis/*exe v2g-artifact/
         - name: Move plugin dll
           run: |
              mv build/run/RelWithDebInfo/plugins/3.6/epan/v2gexi.dll v2g-artifact/v2gexi.dll
         - name: Copy dissector lua
           run: |
              cp plugins/epan/v2g/dissector/v2g.lua v2g-artifact/v2g.lua
         - name: Upload Windows artifacts
           uses: actions/upload-artifact@v2
           with:
              name: packages
              path: v2g-artifact

   release:
      name: Release
      runs-on: windows-2019
      needs: intree
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      steps:
         - name: Download Windows artifacts
           uses: actions/download-artifact@v2
           with:
              name: packages
              path: v2g-artifact
         - name: Tar artifact
           run: |
              tar -cf v2g-artifact.tar -C v2g-artifact .
         - name: Create a release
           id: create_release
           uses: actions/create-release@v1
           with:
              tag_name: ${{ github.ref }}
              release_name: Windows V2G Wireshark Plug-in ${{ github.ref }}
              draft: true
              prerelease: false
         - name: Upload release asset
           uses: actions/upload-release-asset@v1
           with:
              upload_url: ${{ steps.create_release.outputs.upload_url }}
              asset_path: ./v2g-artifact.tar
              asset_name: v2g-${{ github.ref_name }}-win64.tar
              asset_content_type: application/x-tar
